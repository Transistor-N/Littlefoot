//Simple one-octave keyboard + octave switches + a slider, by littlefoot@transistor.no
//Current version: 1.5, 20190704
//Note: the slider's value is not relative to the initial position, this is by choice.
//Instead it is relative to the actual position of the slider block -- just as on a physical keyboard, ie 0-127 from left to right.


/*
<metadata description="One octave keyboard" tags="MIDI;Controller;">
    <variables>
        <variable name="octave" displayName="Octave" type="int" min="0" max="6" value="4" displayMode="stepper" />
        <variable name="slidermode" displayName="Slider mode (PB/Mod/CC)" type="int" min="0" max="2" value="1" displayMode="stepper" />
        <variable name="midicc" displayName="CC Value from slider" type="int" min="0" max="127" value="1" displayMode="stepper" />
        // 0 = pitch bend
        // 1 = mod
        // 2 = midi cc
    </variables>


</metadata>
*/


// Not many variables needed
int octaveup;
int octavedown;
int slider;
int slidervalue;
float sliderpos;


void repaint()
{
    //Drawing of keyboard moved here due to the feedback
    //two (smaller) squares are transpose, five are blacked out (and not responding)
    
    fillRect (0xff001016, 0, 0, 15, 15); //black-ish background, but got to show something
        
    
    fillRect (0xffffffff, 0, 12, 3, 3); //C
    fillRect (0xffffffff, 4, 12, 3, 3); //D
    fillRect (0xffffffff, 8, 12, 3, 3); //E
    fillRect (0xffffffff, 12, 12, 3, 3); //F
    fillRect (0xff0548c3, 2, 9, 3, 3); //C#
    fillRect (0xff0548c3, 6, 9, 3, 3); //D#
    fillRect (0xffffffff, 0, 5, 3, 3); //G
    fillRect (0xffffffff, 4, 5, 3, 3); //A
    fillRect (0xffffffff, 8, 5, 3, 3); //H
    fillRect (0xffffffff, 12, 5, 3, 3); //C
    fillRect (0xff0548c3, 2, 2, 3, 3); //G#
    // fillRect (0xff0548c3, 0, 2, 1, 3); //F#, upper part. This can easily be added, but the proximity to the octave switch is discouraging.
    fillRect (0xff0548c3, 6, 2, 3, 3); //A#
    fillRect (0xff0548c3, 13, 9, 2, 3); //F#
    
    
    //The octave buttons
    
    fillRect (0xffcf0781, 0, 0, 2, 2); //Octave down
    fillRect (0xffcf0781, 13, 0, 2, 2); //Octave up
    
    
    //The slider
    
    fillRect(0xfffe2c02, 4, 0, 7, 1);
    
    
    
    //This draws the feedback
    
    drawPressureMap();
    fadePressureMap();
}

void initialise()
{
    //Initialise the global variable(s)
    
    octave = 5;
    
    if(slidermode != 0) slidervalue = 0;
    else slidervalue = 64; // = zero pitchbend   
    
    //Pad numbers for the octave buttons and slider, not needed, but helps to avoid mistakes
    
    octaveup = 14;
    octavedown = 13;
    slider = 15;
}

void touchStart(int index, float x, float y, float pressure, float pressurerate)
{
    int pad, note, velocity;
    
    //give some feedback
    addPressurePoint(0xff21da03,x,y,pressure*75.0);
    
    //find out which pad has been pressed
    pad = getpad(x,y);
    
    if(pad == slider)
    {
        if (int(x*7) > 3 && int(x*7) < 11)
        {
            //ok, where are we?
            slidervalue = int ((x-0.58) * 127);
            if (slidermode == 1) sendCC(0,1,slidervalue);  
            if (slidermode == 2) sendCC(0,midicc,slidervalue);
            if (slidermode == 0) sendPitchBend(0,slidervalue*128);
        }
    }
    
        
    if(pad>=octavedown)
    {
        if((pad==octavedown) && (octave>0))
        {octave--;}
        if((pad==octaveup) && (octave<6))
        {octave++;}
    }
    else
    {
        if (pad != -1 && pad != slider)
        {
    
            //send midi on
    
            note =(pad+(octave*12));
            sendNoteOn(0,note, 20 + (int (pressure * 127))); //must increase sensitivity, othwerwise it's unplayable
        }
    }
}

void touchMove(int index, float x, float y, float pressure, float pressurerate)
{
    int pad;
    
    pad = getpad(x,y);
    if (pad == slider)
    {
        if (int(x*7) > 3 && int(x*7) < 11)
        {
            //ok, where are we now?
            slidervalue = int ((x-0.58) * 127);
            if (slidermode == 1) sendCC(0,1,slidervalue);
            if (slidermode == 2) sendCC(0,midicc,slidervalue);
            if (slidermode == 0) sendPitchBend(0,slidervalue*128);  
        }
    }
}

void touchEnd(int index, float x, float y, float pressure, float pressurerate)
{
    int pad, note;
    
    
    if (int(y*7) == 0 && slidermode == 0)
    {
        //reset the PB, as long as it's been released, even if it's outside of the original pad
        slidervalue = 64;
        sendPitchBend(0,slidervalue*128);
    }
    else
    {
        //find out which pad has been released
        pad = getpad(x,y);
       
        if (pad != -1 && pad < 13)
        {
            //send midi off, but just for the keys, not the other buttons
            note =(pad+(octave*12));
            sendNoteOff(0,note,127);
        }
    }
}

int getpad(float x, float y)
{
    //find which pad has been pressed or released
    //return 0 - 15 (13 notes + octave switches + slider)

    int xdot, ydot; //not really necessary, but makes it easier to map the keys
    
    xdot = int (x * 7);
    ydot = int (y * 7);
    
    if (ydot == 0 && xdot > 3 && xdot < 11)
    {
        return (slider); //the slider
    }
    
    if (ydot < 2)
    {
        if (xdot < 2) return (octavedown);
        if (xdot > 12) return (octaveup);
    }
    
    
    if (ydot > 1 && ydot < 5)
    {
        if (xdot > 1 && xdot < 5) return (8); //G#
        if (xdot > 5 && xdot < 9) return (10); //A#
    }
    
    if (ydot > 4 && ydot < 8)
    {
        if (xdot >= 0 && xdot < 3) return (7); //G
        if (xdot > 3 && xdot < 7) return (9); //A
        if (xdot > 7 && xdot < 11) return (11); //H
        if (xdot > 11) return (12) ; //C+
    }
    
    if (ydot > 8 && ydot < 12)
    {
        if (xdot > 1 && xdot < 5) return (1); //C#
        if (xdot > 5 && xdot < 9) return (3); //D#
        if (xdot > 11) return (6); //F# (invisible column included to improve playability)
    }
    
    if (ydot > 11)
    {
        if (xdot >= 0 && xdot < 3) return (0); //C
        if (xdot > 3 && xdot < 7) return (2); //D
        if (xdot > 7 && xdot < 11) return (4); //E
        if (xdot > 11) return (5); //F
    }
        
    return (-1); //non-key areas
}
